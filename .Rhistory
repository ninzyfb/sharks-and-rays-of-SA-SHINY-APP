write_feather(overlap_shortened,"overlap_shortened.feather")
##################### PREPARE MASTER TABLE FOR FIRST PAGE
overlap_shortened = unique(species_overlapdata[,c(1,6,7)])
write_feather(overlap_shortened,"overlap_shortened.feather")
master$iucn = NA
##################### MASTER SHEET
# Path
#file_path <- list.files(pattern = "data_summary_master.xlsx", recursive=TRUE,full.names = TRUE)
# File
master = readxl::read_xlsx( list.files(pattern = "data_summary_master.xlsx", recursive=TRUE,full.names = TRUE))
# remove variables that i added previously
master = master[,c(1:4,12)]
master$iucn = NA
master$iucn[which(master$SPECIES_SCIENTIFIC %in% overlap_shortened$SPECIES_SCIENTIFIC[overlap_shortened$type == "iucn"])] = "Yes"
master$iucn[which(is.na(master$iucn))] = "No"
master$sdm = NA
master$sdm[which(master$SPECIES_SCIENTIFIC %in% overlap_shortened$SPECIES_SCIENTIFIC[overlap_shortened$type == "sdm"])] = "Yes"
master$sdm[which(is.na(master$sdm))] = "No"
master = master %>%
mutate(ENDEMIC.STATUS = ifelse(ENDEMIC.STATUS == 1,"South Africa", ifelse(ENDEMIC.STATUS == 2,"Southern Africa", "Not endemic")))
##################### add some info to overlap data
species_overlapdata = left_join(species_overlapdata,master)
write_feather(master,"master.feather")
write_feather(species_overlapdata,"species_overlapdata.feather")
##################### EAST AND WEST BOUNDARIES PER SPECIES
boundaries = read.csv(list.files(pattern = "boundaries.csv",recursive = TRUE, full.names = TRUE))
boundaries = write_feather(boundaries,"boundaries.feather")
##################### MOST RECENT SIGHTING PER MPA
mostrecent_sighting = readRDS(list.files(pattern = "sightings_mostrecent.RDS",recursive = TRUE, full.names = TRUE))
mostrecent_sighting$SPECIES_SCIENTIFIC = as.character(mostrecent_sighting$SPECIES_SCIENTIFIC )
mostrecent_sighting = ungroup(mostrecent_sighting)
colnames(mostrecent_sighting)[which(colnames(mostrecent_sighting) == "SPECIES_SCIENTIFIC")] = "Scientific name"
mostrecent_sighting$`Scientific name` = str_to_sentence(mostrecent_sighting$`Scientific name`)
write_feather(mostrecent_sighting,"mostrecent_sighting.feather")
library(leaflet)
library(leafpop)
library(tidyverse)
library(shinythemes)
library(reactable)
library(stringr)
library(sf)
library(terra)
library(dplyr)
library(DT)
library(htmlwidgets)
library(leaflegend)
library(readxl)
library(flextable)
library(shinyalert)
library(feather)
##################### IUCN COLORS
# Define a color palette for each IUCN Red List status
status_colors <- c(
"VU" = "rgba(255, 255, 0, 0.7)",     # Vulnerable
"LC" = "rgba(0, 128, 0, 0.7)",     # Least Concern
"EN" = "rgba(255, 165, 0, 0.7)",  # Endangered
"DD" = "rgba(128, 128, 128, 0.7)", # Data Deficient
"CR" = "rgba(255, 0, 0, 0.7)",     # Critically Endangered
"NT" = "#B0E57C"    # Near Threatened
)
##################### ENDEMIC COLORS
# Define a color palette for each IUCN Red List status
endemic_colors <- c(
"South Africa" = "#800080",   # Gold
"Southern Africa" = "#9370DB", # Silver
"Not endemic" = "#D8BFD8"     # Bronze
)
##################### ICONS
# Define custom icons
icon_blue <- makeIcon(
iconUrl = list.files(pattern = "boundary_cross.png",recursive=TRUE,full.names=TRUE),  # Replace with the path to your custom icon image
iconWidth = 32,  # Adjust the width and height as needed
iconHeight = 32
)
##################### MPA OVERVIEW DATA
mpa_data_overview = readRDS(list.files(pattern = "mpa_data_overview.RDS",recursive=TRUE))
##################### EEZ DATA
eez_sa = st_read(list.files(pattern = "eez.shp",recursive = TRUE, full.names = TRUE))
##################### MASTER SHEET
# File
master = read_feather(list.files(pattern = "master.feather",recursive=TRUE,full.names=TRUE))
##################### SPECIES PER MPA DATA
# File
species_overlapdata = read_feather(list.files(pattern = "species_permpa_byiusnandsdms.feather", recursive=TRUE,full.names = TRUE))
##################### RASTER DATA
# Read the data
#all_distributions = stack(list.files(path = "/home/nina/Dropbox/6-WILDOCEANS/1-ConservationPlan/wildoceans-scripts_github/Outputs/distribution_rasters/", pattern = "ensemblemean.tiff",full.names = TRUE))
#saveRDS(all_distributions,"all_distributions.RDS")
all_distributions = readRDS(list.files(pattern = "all_distributions.RDS",recursive = TRUE,full.names=TRUE))
##################### POLYGON DATA FROM IUCN
iucn_file_list = readRDS(list.files(pattern = "iucn_file_list.RDS",recursive = TRUE))
##################### PREPARE MASTER TABLE FOR FIRST PAGE
overlap_shortened = read_feather(list.files(pattern = "overlap_shortened",recursive=TRUE,full.names=TRUE))
##################### add some info to overlap data
species_overlapdata = read_feather(list.files(pattern = "species_overlapdata",recursive=TRUE,full.names=TRUE))
##################### Expert extents
load(list.files(pattern = "points.RData", recursive = TRUE, full.names = TRUE))
expert_extent = points
rm(points)
colnames(expert_extent)[1] = "SPECIES_SCIENTIFIC"
expert_extent$SPECIES_SCIENTIFIC = toupper(expert_extent$SPECIES_SCIENTIFIC)
expert_extent = st_as_sf(expert_extent)
expert_extent = left_join(overlap_shortened,expert_extent)
plot(expert_extent)
plot(expert_extent$geometry)
##################### EAST AND WEST BOUNDARIES PER SPECIES
boundaries = read_feather(list.files(pattern = "boundaries.feather",recursive=TRUE,full.names=TRUE))
##################### DATA POINTS PER HIGH RES GRID CELL
highres_gps = readRDS(list.files(pattern = "mostrecent_highres.RDS",recursive = TRUE, full.names = TRUE))
#####################  INITIAL MAP BOUNDARIES
# Define the initial map bounds (you can adjust these values)
initialBounds <- list(
lng1 = 17,
lat1 = -30,
lng2 = 33,
lat2 = -40
)
##################### MOST RECENT SIGHTING PER MPA
mostrecent_sighting = read_feather(list.files(pattern = "mostrecent_sighting.feather",recursive=TRUE,full.names = TRUE))
##################### DATA POINTS PER HIGH RES GRID CELL
lifehistory = read.csv(list.files(pattern = "lifehistory_parameters.csv",recursive = TRUE, full.names = TRUE))
##################### DATA POINTS PER HIGH RES GRID CELL
write_feather(lifehistory,"lifehistory_parameters.csv")
##################### DATA POINTS PER HIGH RES GRID CELL
write_feather(lifehistory,"lifehistory_parameters.feather")
##################### DATA POINTS PER HIGH RES GRID CELL
lifehistory = read_feather(list.files(pattern = "lifehistory_parameters.feather",recursive = TRUE, full.names = TRUE))
##################### DATA POINTS PER HIGH RES GRID CELL
contours = readRDS(list.files(pattern = "contours.RDS",recursive = TRUE))
##################### list of species per map as well as their most recent sighing
compiled_species_list = readRDS(list.files(pattern = "compiled-species_list.RDS",recursive = TRUE,full.names = TRUE))
write_feather(compiled_species_list,"compiled-species_list.feather")
##################### list of species per map as well as their most recent sighing
compiled_species_list = read_feather(list.files(pattern = "compiled_species_list.feather",recursive = TRUE, full.names = TRUE))
##################### list of species per map as well as their most recent sighing
compiled_species_list = read_feather(list.files(pattern = "compiled_species_list.feather",recursive = TRUE, full.names = TRUE))
##################### MPA DATA
shapefile_data_simple = readRDS(list.files(pattern = "shapefile_data_simple.RDS",recursive = TRUE))
# zone typre (test to speed up mapping)
notake = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Restricted","Sanctuary","Wilderness")),]
ccr = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Catch and Release")),]
c = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled")),]
cpl = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled-Pelagic Linefish with list")),]
clp = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Large Pelagic")),]
size(notake)
str(c)
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
##################### MPA DATA
shapefile_data_simple = readRDS(list.files(pattern = "shapefile_data_simple.RDS",recursive = TRUE))
# zone typre (test to speed up mapping)
notake = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Restricted","Sanctuary","Wilderness")),]
ccr = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Catch and Release")),]
c = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled")),]
cpl = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled-Pelagic Linefish with list")),]
clp = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Large Pelagic")),]
notake
runApp()
runApp()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
ccr[,"CUR_NME"]
shapefile_data_simple = shapefile_data_simple %>%
select(CUR_NME)
##################### MPA DATA
shapefile_data_simple = readRDS(list.files(pattern = "shapefile_data_simple.RDS",recursive = TRUE))
shapefile_data_simple = shapefile_data_simple %>%
select(CUR_NME,CUR_ZON_TY)
# zone typre (test to speed up mapping)
notake = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Restricted","Sanctuary","Wilderness")),]
ccr = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Catch and Release")),]
c = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled")),]
cpl = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled-Pelagic Linefish with list")),]
clp = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Large Pelagic")),]
saveRDS(notake,"notake.RDS")
saveRDS(notake,"notake.RDS")
saveRDS(ccr,"ccr.RDS")
saveRDS(c,"c.RDS")
saveRDS(cpl,"cpl.RDS")
saveRDS(clp,"clp.RDS")
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
View(shapefile_data_simple)
##################### MPA DATA
shapefile_data_simple = readRDS(list.files(pattern = "shapefile_data_simple.RDS",recursive = TRUE))
shapefile_data_simple = shapefile_data_simple %>%
select(CUR_NME,CUR_ZON_TY,CUR_ZON_NM)
# zone typre (test to speed up mapping)
notake = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Restricted","Sanctuary","Wilderness")),]
ccr = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Catch and Release")),]
c = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled")),]
cpl = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled-Pelagic Linefish with list")),]
clp = shapefile_data_simple[which(shapefile_data_simple$CUR_ZON_TY %in% c("Controlled Large Pelagic")),]
saveRDS(notake,"notake.RDS")
saveRDS(ccr,"ccr.RDS")
saveRDS(c,"c.RDS")
saveRDS(cpl,"cpl.RDS")
saveRDS(clp,"clp.RDS")
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
library(sf)
install.packages("mapdeck")
key = "pk.eyJ1IjoibmluenlmYiIsImEiOiJjbHVxc3NzcjYwMXVkMnNxcWpjcGxpZHU0In0.e91nxemBTH3tAcwtoAroIw"
mapdeck(token = key)
library(mapdeck)
mapdeck(token = key)
set_token("pk.eyJ1IjoibmluenlmYiIsImEiOiJjbHVxc3NzcjYwMXVkMnNxcWpjcGxpZHU0In0.e91nxemBTH3tAcwtoAroIw")
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
mapdeck()
mapdeck() %>%
addProviderTiles("CartoDB.Positron")
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
add_path(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
add_path(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
add_path(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
add_path(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
add_path(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
add_path(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
add_path(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0,update_view = TRUE)%>%
add_path(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0,update_view = TRUE)%>%
add_path(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones",update_view = TRUE)%>%
add_path(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones",update_view = TRUE)%>%
add_path(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones",update_view = TRUE)%>%
add_path(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones",update_view = TRUE)%>%
add_path(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones",update_view = TRUE)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0,update_view = TRUE)%>%
add_path(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0,update_view = TRUE)%>%
add_path(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones",update_view = F)%>%
add_path(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones",update_view = F)%>%
add_path(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones",update_view = F)%>%
add_path(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones",update_view = F)%>%
add_path(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones",update_view = F)
mapdeck() %>%
#addProviderTiles("CartoDB.Positron") %>%
#setView(lng=20.16181,lat=-33, zoom = 5) %>%
add_path(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0,update_view = F)%>%
add_path(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0,update_view = F)
mapdeck()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
options(shiny.reactlog=TRUE)
runApp()
shiny::runApp()
# code below is to deploy the app to shiny server when it was on shinyapps.io
library(rsconnect)
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
deployApp()
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
deployApp()
runApp()
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
#deployApp()
shiny_loadtest::record_session("http://127.0.0.1:7927")
install.packages("shinyloadtest")
library(shinyloadtest)
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
#deployApp()
shiny_loadtest::record_session("http://127.0.0.1:7927")
detach("package:shinyloadtest", unload = TRUE)
library(shinyloadtest)
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
#deployApp()
shinyloadtest::record_session("http://127.0.0.1:7927")
runApp()
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
#deployApp()
shinyloadtest::record_session("http://127.0.0.1:7927")
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
#deployApp()
shinyloadtest::record_session()
# Load necessary libraries if any
library(shiny)
# Load UI function from ui.R
source("ui.R")
# Load server function from server.R
source("server.R")
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
record_session("http://139.59.189.9:3838")
shinyloadtest_report(list.files(pattern ="0_0_0.csv",recursive = TRUE,full.names = TRUE),"report.html")
shinyloadtest_report(list.files(pattern ="recording.log",recursive = TRUE,full.names = TRUE),"report.html")
list.files(pattern ="recording.log",recursive = TRUE,full.names = TRUE)
shinyloadtest_report(list.files(pattern ="recording.log",recursive = TRUE,full.names = TRUE)[2],"report.html")
runApp()
leaflet()
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
leaflet() %>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
leaflet() %>%
addTiles()%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
# leaflet map
sa_map = leaflet() %>%
addTiles()%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
View(sa_map)
runApp()
?addTiles
# leaflet map
sa_map = leaflet() %>%
addTiles(tileOptions(maxZoom = 100))%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
# leaflet map
sa_map = leaflet() %>%
addTiles(tileOptions(maxZoom = 50))%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
# leaflet map
sa_map = leaflet() %>%
addTiles(tileOptions(maxZoom = 10))%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
# leaflet map
sa_map = leaflet() %>%
addTiles()%>%
addPolygons(data = eez_sa,weight = 1, color = "grey",fillColor = "white",fillOpacity = 0)%>%
addPolylines(data = contours,weight = 1, color = "grey",label = ~DEPTH,popup = ~DEPTH,fillOpacity = 0)%>%
addPolygons(data = notake,weight = 1,popup = ~CUR_NME,label = ~CUR_NME, color = "Blue",fillColor = "skyblue",fillOpacity = 0.6, group = "No-take zones")%>%
addPolygons(data = ccr,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "green4",fillColor = "green",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = c,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "purple",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = cpl,weight = 1,label = ~CUR_NME,popup = ~CUR_NME, color = "Purple",fillColor = "hotpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addPolygons(data = clp,weight = 1,label = ~CUR_NME, popup = ~CUR_NME,color = "Purple",fillColor = "lightpink",fillOpacity = 0.6,group = "Mixed-use zones")%>%
addLegend("bottomleft",title = "Zone Types", colors = c("skyblue","purple","hotpink","lightpink","green"), opacity = 1,
labels = c("Wilderness, Sanctuary or Restricted (No-take zones)","Controlled (Mixed-use zones)","Controlled-Pelagic Linefish with List (Mixed-use zones)","Controlled Large Pelagic (Mixed-use zones)","Controlled Catch and Release (Mixed-use zone, only in iSimangaliso MPA - KZN)")) %>%
addLayersControl(overlayGroups = c("No-take zones","Mixed-use zones"), options = layersControlOptions(collapsed = FALSE,autoZIndex = TRUE))
sa_map
runApp()
# code below is to deploy the app to shiny server when it was on shinyapps.io
library(rsconnect)
# code below is to deploy the app to shiny server when it was on shinyapps.io
#library(rsconnect)
deployApp()
